-- For this project, I downloaded Spotify data from Kaggle. Then I created a table to insert Spotify data into. Finally, I performed analytics on the data using SQL. 

-Creating the table: 
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL 
)

--Then I inserted the Spotify Data .csv into the table.

--Next, I explored the data using the following SQL. 

--Show what artists have the most songs in the set.
SELECT artist_name, count(artist_name)
FROM BIT_DB.Spotifydata
GROUP BY artist_name
ORDER BY count(artist_name) DESC;

--Who has the highest average popularity among artists songs, between Olivia Rodrigo and Doja Cat?
SELECT artist_name, avg(popularity)
FROM BIT_DB.Spotifydata
WHERE artist_name = 'Olivia Rodrigo' 
OR artist_name = 'Doja Cat'
GROUP BY artist_name
ORDER BY avg(popularity) DESC
LIMIT 1

--Which tracks include a featuring artist?
SELECT artist_name, track_name
FROM BIT_DB.Spotifydata
WHERE track_name LIKE '%feat%'
OR track_name LIKE '%with %'
GROUP BY track_name;

--What are the bottom 5 songs by popularity?
SELECT artist_name, track_name, popularity
FROM BIT_DB.Spotifydata
ORDER BY popularity ASC
LIMIT 5;

--How many tracks have a valence between 0.4 and 0.6?
SELECT count(track_name)
FROM BIT_DB.Spotifydata
WHERE valence 
BETWEEN '0.4' and '0.6';

--What is the average loudness for all the songs with >90 in popularity?
SELECT avg(loudness) AS avg_loudness
FROM BIT_DB.Spotifydata
HAVING popularity > '90';

--What is the fastest song by tempo and who is the artist?
SELECT artist_name, track_name, max(tempo)
FROM BIT_DB.Spotifydata
HAVING max(tempo);

--Which artists have less than 80 in popularity, but at least 0.6 in energy?
SELECT artist_name, popularity, energy
FROM BIT_DB.Spotifydata
WHERE popularity < '80' 
AND energy > '0.6'
ORDER BY popularity DESC;

--Which Doja Cat song is highest on the loudness scale?
SELECT track_name, loudness
FROM BIT_DB.Spotifydata
WHERE artist_name = 'Doja Cat'
ORDER BY loudness DESC
LIMIT 1;

--Which Olivia Rodrigo song has the most danceability with a 92 or less in popularity?
SELECT track_name, max(danceability), popularity
FROM BIT_DB.Spotifydata
WHERE artist_name = 'Olivia Rodrigo'
AND popularity <= 92;

--Group songs by their tempo markings description according to its tempo. 
SELECT artist_name, track_name, tempo, CASE
WHEN tempo < 210 AND tempo >= 180 THEN 'Extremely fast'
WHEN tempo < 180 AND tempo >= 150 THEN 'Very fast and lively'
WHEN tempo < 150 AND tempo >= 120 THEN 'Fast and lively'
WHEN tempo < 120 AND tempo >= 100 THEN 'Moderate speed'
WHEN tempo < 100 AND tempo >= 80 THEN 'At a walking pace'
WHEN tempo < 80 THEN 'Slow and stately' END 'Tempo Markings'
FROM BIT_DB.Spotifydata
GROUP BY tempo
ORDER BY 'Tempo Markings';
